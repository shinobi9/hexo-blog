<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>使用traefik管理内网服务</title>
    <link href="/2024/09/30/lan-domain-traefik/"/>
    <url>/2024/09/30/lan-domain-traefik/</url>
    
    <content type="html"><![CDATA[<p>在自己内网部署了几十个服务之后，我才后知后觉的发现管理这么多web页面是非常困难的事</p><p>使用 <a href="https://github.com/gethomepage/homepage">homepage</a> 可以很好的归纳整理内网的服务到一个统一的页面。但是每个服务一个端口，还得保证他们不乱撞（脑子里维护一个端口数据库），某些内网服务可能还要暴露到外网。</p><p><code>traefik</code> 是专为容器而生，使用服务发现来实现网关，非常舒服，比起 <code>nginx</code> 不太需要写太多的配置文件。</p><p>首先 <code>docker network create traefik-proxy --attachable</code> 创建一个网络可以让 <code>traefik</code>的流量到达别的容器</p><p><code>traefik</code> 服务：</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">reverse-proxy:</span> <br>    <span class="hljs-attr">image:</span> <span class="hljs-string">traefik:v3.1.4</span><br>    <span class="hljs-attr">command:</span> <br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--api.dashboard=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--api.insecure=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--providers.docker</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--providers.docker.exposedByDefault=false</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--providers.docker.network=traefik</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--providers.file.directory=/traefik/providers</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--entryPoints.web.address=:80</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">--entryPoints.websecure.address=:443</span><br>    <span class="hljs-attr">volumes:</span><br>    <span class="hljs-comment"># 定义 tls 文件</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./providers:/traefik/providers</span><br>    <span class="hljs-comment"># 存放证书</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./certs:/certs</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;80:80&quot;</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">&quot;443:443&quot;</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik-proxy</span><br>    <span class="hljs-comment">#   下面是让traefik 自身的页面被反代的配置</span><br>    <span class="hljs-comment"># labels:</span><br>    <span class="hljs-comment">#   - traefik.enable=true</span><br>    <span class="hljs-comment">#   - traefik.http.routers.traefik.rule=Host(`traefik.shinobi9.server`)</span><br>    <span class="hljs-comment">#   - traefik.http.services.reverse-proxy.loadbalancer.server.port=8080</span><br>    <span class="hljs-comment">#   - traefik.http.routers.traefik.tls=true</span><br>    <span class="hljs-comment">#   - traefik.http.routers.traefik.entrypoints=websecure</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">traefik-proxy:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><code>./providers/providers</code> 文件里主要定义证书：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">tls:</span><br>  <span class="hljs-attr">certificates:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">certFile:</span> <span class="hljs-string">/certs/shinobi9.server.cer</span><br>      <span class="hljs-attr">keyFile:</span> <span class="hljs-string">/certs/shinobi9.server.key</span><br></code></pre></td></tr></table></figure><p>要被反向代理的服务，一个例子：</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">kuma:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">louislam/uptime-kuma:1.23.13</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/app/data</span><br>    <span class="hljs-comment"># 因为通过 `traefik-proxy` 网络来通信，故不需要在暴露给0.0.0.0</span><br>    <span class="hljs-comment"># ports:</span><br>    <span class="hljs-comment">#   - 9901:3001</span><br>    <span class="hljs-attr">labels:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik.enable=true</span><br>    <span class="hljs-comment">#   配置域名</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik.http.routers.kuma.rule=Host(`uptime.shinobi9.server`)</span><br>    <span class="hljs-comment">#   如果容器内服务的端口是80，可以省略下面这条</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik.http.services.kuma.loadbalancer.server.port=3001</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik.http.routers.kuma.tls=true</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik.http.routers.kuma.entrypoints=websecure</span><br>    <span class="hljs-attr">networks:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">traefik-proxy</span><br><span class="hljs-attr">networks:</span><br>  <span class="hljs-attr">traefik-proxy:</span><br>    <span class="hljs-attr">external:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>内网域名也是一个问题，有些部署的web应用可能使用 <code>webrtc</code> 之类的API强制要求https，所以内网可能还要自签证书。</p><p>关于这部分，网上查了很多资料，最后看了一篇写的非常详尽的 <a href="https://www.tangyuecan.com/2021/12/17/%E5%B1%80%E5%9F%9F%E7%BD%91%E5%86%85%E6%90%AD%E5%BB%BA%E6%B5%8F%E8%A7%88%E5%99%A8%E5%8F%AF%E4%BF%A1%E4%BB%BB%E7%9A%84ssl%E8%AF%81%E4%B9%A6/">博客</a> 。</p><p>再有就是如何让 <code>DNS</code> 解析自己的域名，比如内网部署一个 <code>DNS</code> 服务器，考虑到炸了之后网络容易瘫痪，所以选择了更轻量的两种替代。</p><p>本机Host文件修改，有个非常好用的工具就是 <a href="https://github.com/oldj/SwitchHosts">SwitchHosts</a> 。</p><p>还有就是路由器Host文件修改了，比起本机修改，手机等别的设备就也能享受域名服务了，这个根据路由器品牌和操作系统八仙过海了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>traefik</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>headscale 与 tailscale</title>
    <link href="/2023/07/01/headscale-with-tailscale/"/>
    <url>/2023/07/01/headscale-with-tailscale/</url>
    
    <content type="html"><![CDATA[<p>上班想访问家中的设备，因为设备比较多，暴露端口比较麻烦，动态ip还得弄ddns，查了一下 <code>zerotier</code>，<code>tailscale</code> 在这个领域比较热门。</p><p>刚开始用了很长一段时间的zerotier，配置比较简单，所以感觉还可以。</p><p>不知道什么时候开始，经常出现无法握手的情况，添加了自己搭的 <code>moon</code> 服务器也是好一阵坏一阵，所以试着换到 <code>tailscale</code>。</p><p><code>tailscale</code> 是一个客户端开源，服务端不开源的软件，</p><p><code>headscale</code> 是一个欧洲航天局的开发者开发的一款开源的 <code>tailscale</code> 服务端，</p><p><code>headscale-ui</code> 是一个纯静态的控制 <code>headscale</code> 的前端项目。</p><p>下面是具体的配置</p><p>本地：</p><p><code>headscale-ui/docker-compose.yml</code></p><figure class="highlight dts"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  ui:</span><br><span class="hljs-symbol">    image:</span> <span class="hljs-string">&quot;ghcr.io/gurucomputing/headscale-ui:latest&quot;</span><br><span class="hljs-symbol">    restart:</span> unless-stopped<br><span class="hljs-symbol">    container_name:</span> headscale-ui<br><span class="hljs-symbol">  nginx:</span><br><span class="hljs-symbol">    image:</span> <span class="hljs-string">&quot;nginx:1.25.0&quot;</span><br><span class="hljs-symbol">    restart:</span> always<br><span class="hljs-symbol">    volumes:</span><br>      - ./default.conf:<span class="hljs-keyword">/etc/</span>nginx/conf.d/default.conf<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">3000</span>:<span class="hljs-number">80</span><br></code></pre></td></tr></table></figure><p><code>nginx/default.conf</code></p><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-section">server</span> &#123;<br>    <span class="hljs-attribute">listen</span>       <span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">listen</span>  [::]:<span class="hljs-number">80</span>;<br>    <span class="hljs-attribute">server_name</span>  localhost;<br>    <span class="hljs-comment">#access_log  /var/log/nginx/host.access.log  main;</span><br>    <span class="hljs-section">location</span> /web/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://ui:80/web/;<br>    &#125;<br>    <span class="hljs-section">location</span> /api/ &#123;<br>        <span class="hljs-attribute">proxy_pass</span> http://&lt;服务器ip&gt;:5488/api/;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><hr><p>服务器：</p><p><code>headscale/docker-compose.yml</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><span class="hljs-symbol">services:</span><br><span class="hljs-symbol">  headscale:</span><br><span class="hljs-symbol">    image:</span> headscale/headscale:<span class="hljs-number">0.22</span><span class="hljs-number">.3</span>-debug<br><span class="hljs-symbol">    container_name:</span> headscale<br><span class="hljs-symbol">    volumes:</span><br>      - .<span class="hljs-keyword">/headscale/</span>config:<span class="hljs-keyword">/etc/</span>headscale<br>      - .<span class="hljs-keyword">/headscale/</span>data/data:<span class="hljs-keyword">/var/</span>lib/headscale<br><span class="hljs-symbol">    ports:</span><br>      - <span class="hljs-number">5488</span>:<span class="hljs-number">5488</span><br><span class="hljs-symbol">    command:</span> headscale serve<br><span class="hljs-symbol">    restart:</span> unless-stopped<br></code></pre></td></tr></table></figure><p><code>headscale/config.yaml</code></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">server_url:</span> http:<span class="hljs-comment">//&lt;服务器ip&gt;:5488</span><br><span class="hljs-symbol">listen_addr:</span> <span class="hljs-number">0.0</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>:<span class="hljs-number">5488</span><br><span class="hljs-symbol">private_key_path:</span> <span class="hljs-keyword">/etc/</span>headscale/private.key<br><span class="hljs-symbol">noise:</span><br><span class="hljs-symbol">  private_key_path:</span> <span class="hljs-keyword">/etc/</span>headscale/noise_private.key<br><span class="hljs-symbol">db_type:</span> sqlite3<br><span class="hljs-symbol">db_path:</span> <span class="hljs-keyword">/etc/</span>headscale/db.sqlite<br><span class="hljs-symbol">ip_prefixes:</span><br>  - <span class="hljs-number">100.64</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">10</span><br></code></pre></td></tr></table></figure><p>我的<code>headscale-ui</code>部署在本地，所以配置没有写在一起。</p><p>进入 <code>headscale-ui</code> 之后，设置里 <code>Headscale URL</code> 填入 <code>headscale-ui</code> 自己本身的路径即可，这里为了避免跨域，因为 <code>headscale-ui</code> 页面都有 <code>/web/</code> 前缀，且 <code>headscale</code> 的接口不支持跨域，所以在 <code>nginx</code> 中的配置文件写了那样的规则。</p><p>在 <code>Headscale API Key</code> 填入服务器上执行 </p><figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">docker-compose <span class="hljs-built_in">exec</span> headscale headscale apikeys <span class="hljs-keyword">create</span><br></code></pre></td></tr></table></figure><p>返回的结果，默认两个月会过期。</p><p>至于客户端的配置，windows的客户端需要修改注册表，具体什么缓存问题可以直接看官方给出的<a href="https://github.com/juanfont/headscale/blob/main/docs/windows-client.md">文档</a>。文档里也给出了别的平台的客户端如何<strong>不去连接</strong> <code>tailscale</code> 的服务器。</p><p>要实现在异地使用 <code>192.168.x.y</code> 访问家里设备该如何做？</p><p>软路由&#x2F;路由上一般也会给出 <code>tailscale</code> 插件，我用的固件只提供了连接官方服务器的插件，所以我使用下面的命令行。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">tailscale up --accept-routes \<br> <span class="hljs-attribute">--accept-dns</span>=<span class="hljs-literal">false</span> <span class="hljs-attribute">--snat-subnet-routes</span>=<span class="hljs-literal">false</span> \<br> <span class="hljs-attribute">--advertise-routes</span>=192.168.x.0/24 \<br> <span class="hljs-attribute">--login-server</span>=http://&lt;服务器&gt;:5488<br></code></pre></td></tr></table></figure><p><code>192.168.x.0/24</code> 是局域网的网段，我的是 <code>192.168.0.0</code>。</p><p>执行完需要去 <code>headscale-ui</code> 里启用一下 <code>Device Routes</code> ，客户端中打印路由表有额外的关于 <code>192.168.x.0</code> 就证明下发成功了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>headscale</tag>
      
      <tag>tailscale</tag>
      
      <tag>vpn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Github Codespaces 使用</title>
    <link href="/2023/06/19/github-codespaces/"/>
    <url>/2023/06/19/github-codespaces/</url>
    
    <content type="html"><![CDATA[<p>使用 <code>github.dev</code> 开网页 <code>vscode</code> 查看代码，尤其是多文件跳跃地看，比起网页上点来点去可方便太多了。</p><p>而 <code>github</code> 推出的 <code>codespace</code> 功能提供了在浏览器编写，编译，运行功能，配合<code>github actions</code>，可以只用一个浏览器，很轻松地完成对 <code>hexo</code> 这类静态网站的迭代，因为只需要一个浏览器，手机，平板，甚至是电视机，都能为 <code>开发设备</code> 。</p><p>其实这种网页版的 <code>vscode</code> 有 <a href="https://github.com/coder/code-server">code server</a> 这个开源项目，国内阿里，腾讯云提供的在线编辑也基本是这种东西。不过这个功能因为内建在<code>github</code>，只要登录了<code>github</code>了，后续提交代码也不需要输密码或者提供<code>sshkey</code>了。虽说有120小时&#x2F;月的限制，对于轻度使用是完全够用的。</p><p>本次文章更新就是 <code>powered by codespace</code>。</p>]]></content>
    
    
    
    <tags>
      
      <tag>github</tag>
      
      <tag>vscode</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从Drone 迁移到 Gitea Actions</title>
    <link href="/2023/06/15/ci-actions/"/>
    <url>/2023/06/15/ci-actions/</url>
    
    <content type="html"><![CDATA[<p>先来说说代码托管服务器的一般问题和DevOps问题：</p><ul><li><p><code>Github</code>:<br>因为GFW的原因，常年访问速度较慢。<br>虽然标榜自己是开源平台，但是仍做出了不通知直接删除某些国家和地区repo或是封禁某些国家和地区的用户的行为。<br>因其有实际上垄断地位，说其是帝国主义在网络上的延伸不为过。</p><p>不过它的CI工具 <code>Github Actions</code> 配合 <code>Github Pages</code> 服务可以很方便地自动化部署一些静态的web项目。</p></li><li><p><code>Gitee</code>:<br>也是因为GFW以及更早的支持私有仓库，在国内积累了很大的生态。<br>但是某段时间为了应付审查将所有的仓库强行变更为私有，只能通过类似备案或是申请审查来变回开源仓库。<br>后面甚至还出现了审查代码内容的行为，让人讲话，天不会塌下来，再就是码云下载代码还要登录。</p><p>因为过多原因，在个人开发时完全放弃了，新出的流水线功能还未尝试。</p></li></ul><hr><p>在个人的代码的托管上，我最后选择了 <code>Gitea</code>，它是 <code>Gogs</code> 的分支。</p><p>在选型时，<code>GitLab</code> 因为和 <code>GitLab CI</code> 绑定，不好迁移。</p><p>最早在使用 <code>Gitea</code> 时，它还没有CI功能，但是胜在比 <code>GitLab</code> 和 <code>Jenkins</code> 轻量级。</p><p>当时在公司服务器部署 <code>GitLab</code> ，经常吃掉 4~5G 内存，而 <code>Gitea</code> 可能就 50M ，虽然现在加了很多功能，</p><p>内存也才到200 ~ 300M，完全可以接受。</p><p>因为 <code>Gitea</code> 没有 CI 功能，我又给它找了个伴侣————<code>Drone CI</code>，说实话看到它第一眼确实被惊艳到了，它使用容器作为每一道工序的工具，拿起整个<code>Docker</code>的生态作为武器库，使得它的透明性和 DIY 能力非常强。</p><figure class="highlight yaml"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">kind:</span> <span class="hljs-string">pipeline</span><br><span class="hljs-attr">type:</span> <span class="hljs-string">docker</span><br><span class="hljs-attr">name:</span> <span class="hljs-string">hexo-blog-ci</span><br><br><span class="hljs-attr">trigger:</span><br>  <span class="hljs-attr">branch:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br>  <span class="hljs-attr">event:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">push</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">custom</span><br><br><span class="hljs-attr">clone:</span><br>  <span class="hljs-attr">depth:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">steps:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">build</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">node:18.15-alpine3.16</span><br>    <span class="hljs-attr">pull:</span> <span class="hljs-string">if-not-exists</span><br>    <span class="hljs-attr">commands:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">yarn</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">yarn</span> <span class="hljs-string">build</span><br><br>  <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">publish</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">plugins/gh-pages:1.3.2</span><br>    <span class="hljs-attr">pull:</span> <span class="hljs-string">if-not-exists</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">DRONE_REMOTE_URL:</span> <span class="hljs-string">&quot;git@github.com:shinobi9/hexo-blog.git&quot;</span><br>    <span class="hljs-attr">settings:</span><br>      <span class="hljs-attr">pages_directory:</span> <span class="hljs-string">public</span><br>      <span class="hljs-attr">ssh_key:</span><br>        <span class="hljs-attr">from_secret:</span> <span class="hljs-string">SSH_KEY</span><br></code></pre></td></tr></table></figure><p>上面曾是我博客的部署方式，<code>.drone.yml</code>的配置文件的内容。</p><p><code>Drone CI</code> 官方的容器 一般以 plugins 开头，有点抢注了厉害的id的感觉。</p><p>写 <code>.drone.yml</code> 的感觉非常享受，尤其还是盲写不报错的时候，有点像写 <code>Kotlin</code> 的感觉，它也是借助 <code>Java</code> 生态并且提供更简介的语法，从这方面来讲，确实两者很像。</p><p><code>Drone</code> 官方也提供了云服务，通过 <a href="https://cloud.drone.io/">https://cloud.drone.io/</a> 来访问，我（部署在<code>github</code>上的博客）当时也是部署在这上。</p><p>不知道什么时候，想起更新博客的时候发现，托管在云服务上的CI被挂起了，也没找到原因（因为我很少写博客，理应不会占用太多免费配额）。</p><p>如果是本地的 <code>Gitea</code> 配合 本地的 <code>Drone</code> 确实是很好的组合。所以瑕不掩瑜，我还是使用了很久的 <code>Drone</code>，即使 <code>Github</code> 一直发邮件给我骚扰我用 <code>github actions</code> 我也没去看。</p><p>直到某天我打开我本地的 <code>Gitea</code> 看到了版本号的巨大变化，我迫不及待更新了 1.19 ，顺便去看了一眼changelog，才发现早在几个月前，<code>Gitea</code> 推出了自己的CI ———— <code>Gitea Actions</code>。</p><p>虽然我不得不承认 <code>Gitea</code> 和 <code>Drone</code> 的组合很厉害，但是我还是忍不住去看了  <code>Gitea Actions</code> 的文档。</p><p>下面是 <code>Gitea Actions</code>的使用： 省流！</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">在 gitea 中 开启 gitea actions 功能</span><br>cat &gt;&gt; app.ini &lt;&lt; EOF<br>[actions]<br>ENABLED=true<br>EOF<br></code></pre></td></tr></table></figure><p>关于 runner 搞一个 <code>config.yaml</code> </p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">cache:</span><br>  <span class="hljs-attr">enabled:</span> <span class="hljs-literal">true</span><br>  <span class="hljs-attr">dir:</span> <span class="hljs-string">&lt;cache</span> <span class="hljs-string">dir&gt;</span><br>  <span class="hljs-comment"># Use the LAN IP obtained in step 1</span><br>  <span class="hljs-attr">host:</span> <span class="hljs-string">&lt;act_runner</span> <span class="hljs-string">ip&gt;</span><br>  <span class="hljs-comment"># Use the port number obtained in step 2</span><br>  <span class="hljs-attr">port:</span> <span class="hljs-string">&lt;act_runner</span> <span class="hljs-string">port.</span> <span class="hljs-string">eg</span> <span class="hljs-number">5500</span><span class="hljs-string">&gt;</span><br></code></pre></td></tr></table></figure><p>然后用 <code>docker-compose.yml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">version:</span> <span class="hljs-string">&#x27;3&#x27;</span><br><br><span class="hljs-attr">services:</span><br>  <span class="hljs-attr">gitea_runners:</span><br>    <span class="hljs-attr">image:</span> <span class="hljs-string">gitea/act_runner:nightly</span><br>    <span class="hljs-attr">ports:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-number">5500</span><span class="hljs-string">:5500</span><br>    <span class="hljs-attr">volumes:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">/var/run/docker.sock:/var/run/docker.sock</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./data:/data</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">./config.yaml:/config.yaml</span><br>    <span class="hljs-attr">restart:</span> <span class="hljs-string">unless-stopped</span><br>    <span class="hljs-attr">environment:</span><br>      <span class="hljs-attr">CONFIG_FILE:</span> <span class="hljs-string">/config.yaml</span><br>      <span class="hljs-attr">GITEA_INSTANCE_URL:</span> <span class="hljs-string">&lt;gitea</span> <span class="hljs-string">url&gt;</span><br>      <span class="hljs-attr">GITEA_RUNNER_REGISTRATION_TOKEN:</span> <span class="hljs-string">&lt;token&gt;</span><br>  <span class="hljs-comment">#    GITEA_RUNNER_NAME:</span><br>  <span class="hljs-comment">#   GITEA_RUNNER_LABELS:</span><br></code></pre></td></tr></table></figure><p><code>Gitea</code> 默认所有项目都不开启 <code>Gitea Actions</code> ，设置-高级设置 里打开即可。</p><p><code>Github Actions</code> 和 <code>Drone CI</code> 一样借助于生态， 不同的是 <code>Github Actions</code>使用的生态就是它的本身，用户的仓库。</p><p>而<code>Gitea Actions</code> 的语法大部分兼容 <code>Github Actions</code> ，而原理是 借助于 <a href="https://github.com/nektos/act">nektos&#x2F;act</a> （它的分支），</p><p>它可以让用户可以在本地部署 <code>Github Actions</code> 的执行器。</p><p>下面给出它的例子 <code>.gitea/workflows/ci.yaml</code></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build:</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-latest</span><br>    <span class="hljs-attr">steps:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">checkout</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v2</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">cache</span> <span class="hljs-string">node_modules</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">https://github.com/actions/cache@v2</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">path:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          node_modules</span><br><span class="hljs-string">          ~/.npm</span><br><span class="hljs-string"></span>        <span class="hljs-attr">key:</span> <span class="hljs-string">&lt;...key&gt;</span><br>        <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">&lt;...restore</span> <span class="hljs-string">key&gt;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">use</span> <span class="hljs-string">nodejs</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v1</span><br>      <span class="hljs-attr">with:</span><br>        <span class="hljs-attr">node-version:</span> <span class="hljs-string">&#x27;18.16.0&#x27;</span><br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">dependencies</span> <span class="hljs-string">and</span> <span class="hljs-string">build</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">        npm install</span><br><span class="hljs-string">        npm run build</span><br><span class="hljs-string"></span>      <br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">install</span> <span class="hljs-string">rsync</span><br>      <span class="hljs-attr">run:</span> <span class="hljs-string">apt-get</span> <span class="hljs-string">update</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">apt-get</span> <span class="hljs-string">install</span> <span class="hljs-string">rsync</span> <span class="hljs-string">-y</span> <br><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">upload</span> <span class="hljs-string">and</span> <span class="hljs-string">restart</span><br>      <span class="hljs-attr">uses:</span> <span class="hljs-string">https://github.com/easingthemes/ssh-deploy@main</span><br>      <span class="hljs-attr">env:</span><br>        <span class="hljs-attr">SSH_PRIVATE_KEY:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.SHINOBI9_DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">ARGS:</span> <span class="hljs-string">&quot;-rlgoDzvc -i --delete&quot;</span><br>        <span class="hljs-attr">SOURCE:</span> <span class="hljs-string">./build</span><br>        <span class="hljs-attr">REMOTE_HOST:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEPLOY_SERVER</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">REMOTE_USER:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEPLOY_USER</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-attr">TARGET:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEPLOY_TARGET</span> <span class="hljs-string">&#125;&#125;</span><br>        <span class="hljs-comment"># EXCLUDE: &quot;/dist/, /node_modules/&quot;</span><br>        <span class="hljs-attr">SCRIPT_AFTER:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          cd $&#123;&#123; secrets.DEPLOY_TARGET &#125;&#125;</span><br><span class="hljs-string">          docker-compose restart web      </span><br></code></pre></td></tr></table></figure><p>我隐去了部分无关内容，可以看的出虽然看上去比起<code>Drone CI</code>来说没有那么简洁，但是同为 Yaml，也说不上多复杂，</p><p>写过几个例子之后，感觉不如<code>Drone CI</code>。。。。简洁，但是一想到不仅可以从<code>github</code>上的 <a href="https://github.com/marketplace?type=actions">market</a> 里~~~毛~~~别人的 actions。还可以直接拿repo来用。</p><p>不说了，去做移植工作了。顺便贴下这个博客移植之后的actions文件。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span> <span class="hljs-string">to</span> <span class="hljs-string">GitHub</span> <span class="hljs-string">Pages</span><br><br><span class="hljs-attr">on:</span><br>  <span class="hljs-attr">push:</span><br>    <span class="hljs-attr">branches:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">main</span><br><br><span class="hljs-attr">jobs:</span><br>  <span class="hljs-attr">build-and-deploy:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Build</span> <span class="hljs-string">and</span> <span class="hljs-string">Deploy</span><br>    <span class="hljs-attr">runs-on:</span> <span class="hljs-string">ubuntu-20.04</span><br>    <span class="hljs-attr">steps:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Checkout</span> <span class="hljs-string">code</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/checkout@v3</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Cache</span> <span class="hljs-string">dependencies</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">cache</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/cache@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">path:</span> <span class="hljs-string">node_modules</span><br>          <span class="hljs-attr">key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">runner.os</span> <span class="hljs-string">&#125;&#125;-node-$&#123;&#123;</span> <span class="hljs-string">hashFiles(&#x27;**/yarn.lock&#x27;)</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">restore-keys:</span> <span class="hljs-string">|</span><br><span class="hljs-string">            $&#123;&#123; runner.os &#125;&#125;-node-</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Use</span> <span class="hljs-string">Node.js</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">actions/setup-node@v3</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">node-version:</span> <span class="hljs-number">18.16</span><span class="hljs-number">.0</span><br><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Yarn</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">i</span> <span class="hljs-string">-g</span> <span class="hljs-string">yarn</span><br>      <br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Install</span> <span class="hljs-string">Dependencies</span><br>        <span class="hljs-attr">if:</span> <span class="hljs-string">steps.cache.outputs.cache-hit</span> <span class="hljs-type">!=</span> <span class="hljs-string">&#x27;true&#x27;</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br><span class="hljs-string">          yarn install --frozen-lockfile</span><br><span class="hljs-string"></span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Deploy</span><br>        <span class="hljs-attr">id:</span> <span class="hljs-string">deploy</span><br>        <span class="hljs-attr">uses:</span> <span class="hljs-string">sma11black/hexo-action@v1.0.4</span><br>        <span class="hljs-attr">with:</span><br>          <span class="hljs-attr">deploy_key:</span> <span class="hljs-string">$&#123;&#123;</span> <span class="hljs-string">secrets.DEPLOY_KEY</span> <span class="hljs-string">&#125;&#125;</span><br>          <span class="hljs-attr">branch:</span> <span class="hljs-string">gh-pages</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Get</span> <span class="hljs-string">the</span> <span class="hljs-string">output</span><br>        <span class="hljs-attr">run:</span> <span class="hljs-string">|</span><br>          <span class="hljs-string">echo</span> <span class="hljs-string">&quot;$<span class="hljs-template-variable">&#123;&#123; steps.deploy.outputs.notify &#125;&#125;</span>&quot;</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>ci</tag>
      
      <tag>gitea</tag>
      
      <tag>gitea actions</tag>
      
      <tag>drone</tag>
      
      <tag>jenkins</tag>
      
      <tag>github</tag>
      
      <tag>github actions</tag>
      
      <tag>gitlab</tag>
      
      <tag>gitlab ci</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pve lxc容器的NFS挂载问题</title>
    <link href="/2023/05/09/pve-docker-nfs/"/>
    <url>/2023/05/09/pve-docker-nfs/</url>
    
    <content type="html"><![CDATA[<p>折腾 <code>PVE</code> 的时候，遇到docker容器挂载nfs卷失败，具体表现是 <code>operation not commit</code>，单纯 <code>mount -vvv</code>出来的东西拿去搜不好使，关键词带搜索 <code>Proxmox</code> 之后 解决方案就多了，一种是在 <code>pve</code> 上先挂载 <code>nfs</code> 然后再 <code>bind mount</code> 到容器里去，具体参考 <a href="https://unix.stackexchange.com/questions/715278/mount-nfs-operation-not-permitted-in-proxmox-container">这里</a> , 另外一种简单的就是在创建容器的时候取消勾选 <code>非特权容器</code> ，这里会同时取消 <code>嵌套</code> ，再之后 用命令行打开 <code>嵌套</code> 即可。</p><p>这里折腾了老半天主要是因为我以为问题在<code>docker</code>上</p>]]></content>
    
    
    
    <tags>
      
      <tag>docker</tag>
      
      <tag>nfs</tag>
      
      <tag>virtualization</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>steamdeck 挂载 NAS</title>
    <link href="/2023/03/29/steamdeck-with-nas/"/>
    <url>/2023/03/29/steamdeck-with-nas/</url>
    
    <content type="html"><![CDATA[<h3 id="steamdeck-挂载-NAS"><a href="#steamdeck-挂载-NAS" class="headerlink" title="steamdeck 挂载 NAS"></a>steamdeck 挂载 NAS</h3><p>先安装nfs依赖,需要先关闭steamos的读写保护,装完了再开启</p><figure class="highlight shell"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><pre><code class="hljs shell">sudo pacman -Syu<br>sudo steamos-readonly disable<br>sudo pacman -S sshfs<br>sudo pacman-key --init<br>sudo pacman-key --populate<br>sudo pacman -S sshfs<br>sudo pacman -S nfs-utils<br>sudo steamos-readonly enable<br></code></pre></td></tr></table></figure><p>然后再修改<code>/etc/fstab</code>,添加路径映射</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">Static information about the filesystems.</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">See fstab(5) <span class="hljs-keyword">for</span> details.</span><br><span class="hljs-meta prompt_"></span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">&lt;file system&gt; &lt;<span class="hljs-built_in">dir</span>&gt; &lt;<span class="hljs-built_in">type</span>&gt; &lt;options&gt; &lt;dump&gt; &lt;pass&gt;</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">SteamOS partitions</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">/dev/disk/by-partsets/self/rootfs /       ext4    defaults                0       1</span><br><span class="hljs-meta prompt_">#</span><span class="language-bash">/dev/disk/by-partsets/self/var    /var    ext4    defaults                0       2</span><br>/dev/disk/by-partsets/self/efi    /efi                                  vfat    defaults,nofail,umask=0077,x-systemd.automount,x-systemd.idle-timeout=1min 0       2<br>/dev/disk/by-partsets/shared/esp  /esp                                  vfat    defaults,nofail,umask=0077,x-systemd.automount,x-systemd.idle-timeout=1min 0       2<br>/dev/disk/by-partsets/shared/home /home                                 ext4    defaults,nofail,x-systemd.growfs 0       2<br>&lt;你的NAS IP&gt;:&lt;你的NAS 路径&gt;         &lt;映射到steamdeck的路径,我的是/run/media/nas&gt;  nfs     defaults,soft,timeo=900,x-systemd.automount,vers=4.1,_netdev 0 0<br></code></pre></td></tr></table></figure><p>最后</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">sudo mount -a<br></code></pre></td></tr></table></figure><p>一般开机有网络会自动连上，没有网络再输入一遍<code>sudo mount -a</code> 即可。每次更新<code>steamos</code> 可能会失效，需要重新安装依赖，具体关注 <a href="https://github.com/ValveSoftware/SteamOS/issues/963">963</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>nfs</tag>
      
      <tag>steamdeck</tag>
      
      <tag>nas</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>kubejs</title>
    <link href="/2022/02/15/kubejs/"/>
    <url>/2022/02/15/kubejs/</url>
    
    <content type="html"><![CDATA[<h2 id="整合包利器-kubejs"><a href="#整合包利器-kubejs" class="headerlink" title="整合包利器: kubejs"></a>整合包利器: kubejs</h2><span id="more"></span><p>最近拿家里的闲置电脑当服务器开了个minecraft服,在机械飞升整合包里发现了这个模组。</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// world/kubejs/server_scripts/scripts.js</span><br><span class="hljs-comment">// 修改配方需要 游戏内的 /reload 会卡ui线程</span><br><br><span class="hljs-comment">//简化代码</span><br><span class="hljs-keyword">let</span> <span class="hljs-title function_">MOD</span> = (<span class="hljs-params">domain, id, x</span>) =&gt; (x ? <span class="hljs-string">`<span class="hljs-subst">$&#123;x&#125;</span>x `</span> : <span class="hljs-string">&quot;&quot;</span>) + (id.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;#&#x27;</span>) ? <span class="hljs-string">&#x27;#&#x27;</span> : <span class="hljs-string">&quot;&quot;</span>) + domain + <span class="hljs-string">&quot;:&quot;</span> + id.<span class="hljs-title function_">replace</span>(<span class="hljs-string">&#x27;#&#x27;</span>, <span class="hljs-string">&#x27;&#x27;</span>)<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">AE2</span> = (<span class="hljs-params">id, x</span>) =&gt; <span class="hljs-title function_">MOD</span>(<span class="hljs-string">&quot;appliedenergistics2&quot;</span>, id, x)<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">TE</span> = (<span class="hljs-params">id, x</span>) =&gt; <span class="hljs-title function_">MOD</span>(<span class="hljs-string">&quot;thermal&quot;</span>, id, x)<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">AP</span> = (<span class="hljs-params">id, x</span>) =&gt; <span class="hljs-title function_">MOD</span>(<span class="hljs-string">&quot;architects_palette&quot;</span>, id, x)<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">FD</span> = (<span class="hljs-params">id, x</span>) =&gt; <span class="hljs-title function_">MOD</span>(<span class="hljs-string">&quot;farmersdelight&quot;</span>, id, x)<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">MC</span> = (<span class="hljs-params">id, x</span>) =&gt; <span class="hljs-title function_">MOD</span>(<span class="hljs-string">&quot;minecraft&quot;</span>, id, x)<br><span class="hljs-keyword">let</span> <span class="hljs-title function_">CH</span> = (<span class="hljs-params">id, x</span>) =&gt; <span class="hljs-title function_">MOD</span>(<span class="hljs-string">&quot;chisel&quot;</span>, id, x)<br><br><span class="hljs-comment">//移除匠魂 的弹簧鞋</span><br><span class="hljs-title function_">onEvent</span>(<span class="hljs-string">&#x27;recipes&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>    log.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;Registering Recipes&#x27;</span>)<br>    event.<span class="hljs-title function_">remove</span>(&#123;<span class="hljs-attr">output</span>: <span class="hljs-string">&#x27;tconstruct:earth_slime_sling&#x27;</span>&#125;)<br>    event.<span class="hljs-title function_">remove</span>(&#123;<span class="hljs-attr">output</span>: <span class="hljs-string">&#x27;tconstruct:sky_slime_sling&#x27;</span>&#125;)<br>    event.<span class="hljs-title function_">remove</span>(&#123;<span class="hljs-attr">output</span>: <span class="hljs-string">&#x27;tconstruct:ichor_slime_sling&#x27;</span>&#125;)<br>    event.<span class="hljs-title function_">remove</span>(&#123;<span class="hljs-attr">output</span>: <span class="hljs-string">&#x27;tconstruct:ender_slime_sling&#x27;</span>&#125;)<br>&#125;)<br><br><span class="hljs-comment">// oak_log          橡木</span><br><span class="hljs-comment">// stripped_oak_log 去皮橡木</span><br><span class="hljs-comment">//  CR =&gt; create:   删除机械动力提供的橡木=&gt;木板的配方,并且提供一个 获取农夫乐事的树皮的 合成(橡木 =&gt; 去皮橡木 + 树皮)</span><br><span class="hljs-comment">// 需要 kubejs create 支持( kubejs 扩展</span><br><span class="hljs-title function_">onEvent</span>(<span class="hljs-string">&#x27;recipes&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>    event.<span class="hljs-title function_">remove</span>(&#123;<span class="hljs-attr">id</span>: <span class="hljs-title function_">CR</span>(<span class="hljs-string">&quot;cutting/oak_log&quot;</span>)&#125;)<br>    event.<span class="hljs-property">recipes</span>.<span class="hljs-title function_">createCutting</span>([<span class="hljs-title function_">MC</span>(<span class="hljs-string">&quot;stripped_oak_log&quot;</span>), <span class="hljs-title function_">FD</span>(<span class="hljs-string">&quot;tree_bark&quot;</span>)], <span class="hljs-title function_">MC</span>(<span class="hljs-string">&quot;oak_log&quot;</span>)).<span class="hljs-title function_">processingTime</span>(<span class="hljs-number">50</span>)<br>&#125;)<br><br><span class="hljs-title function_">onEvent</span>(<span class="hljs-string">&#x27;recipes&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br><span class="hljs-comment">// 移除凿子的两个合成</span><br>    event.<span class="hljs-title function_">remove</span>(&#123;<span class="hljs-attr">id</span>: <span class="hljs-title function_">CH</span>(<span class="hljs-string">&quot;iron_chisel&quot;</span>)&#125;)<br>    event.<span class="hljs-title function_">remove</span>(&#123;<span class="hljs-attr">id</span>: <span class="hljs-title function_">CH</span>(<span class="hljs-string">&quot;diamond_chisel&quot;</span>)&#125;)<br><br><span class="hljs-comment">// 为其添加不一样的合成（有序），这一步是因为他和农夫乐事的小刀的合成冲突</span><br>    event.<span class="hljs-title function_">shaped</span>(<span class="hljs-title function_">CH</span>(<span class="hljs-string">&quot;iron_chisel&quot;</span>), [<br>        <span class="hljs-string">&#x27;R &#x27;</span>,<br>        <span class="hljs-string">&#x27; M&#x27;</span>,<br>    ], &#123;<br>        <span class="hljs-attr">R</span>: <span class="hljs-title function_">F</span>(<span class="hljs-string">&#x27;#rods&#x27;</span>),<br>        <span class="hljs-attr">M</span>: <span class="hljs-title function_">MC</span>(<span class="hljs-string">&#x27;iron_ingot&#x27;</span>)<br>    &#125;)<br><br>    event.<span class="hljs-title function_">shaped</span>(<span class="hljs-title function_">CH</span>(<span class="hljs-string">&quot;diamond_chisel&quot;</span>), [<br>        <span class="hljs-string">&#x27;R &#x27;</span>,<br>        <span class="hljs-string">&#x27; M&#x27;</span>,<br>    ], &#123;<br>        <span class="hljs-attr">R</span>: <span class="hljs-title function_">F</span>(<span class="hljs-string">&#x27;#rods&#x27;</span>),<br>        <span class="hljs-attr">M</span>: <span class="hljs-title function_">MC</span>(<span class="hljs-string">&#x27;diamond&#x27;</span>)<br>    &#125;)<br>&#125;)<br><br><br><span class="hljs-comment">// 修改聊天事件 不需要/reload  使用 /kubejs reload server_scripts... 就可，不会卡ui线程</span><br><span class="hljs-comment">// 指令 </span><br><span class="hljs-title function_">onEvent</span>(<span class="hljs-string">&#x27;player.chat&#x27;</span>, <span class="hljs-function"><span class="hljs-params">event</span> =&gt;</span> &#123;<br>    <span class="hljs-comment">// Check if message equals creeper, ignoring case</span><br>    <span class="hljs-keyword">if</span> (event.<span class="hljs-property">message</span>.<span class="hljs-title function_">startsWith</span>(<span class="hljs-string">&#x27;查询太行山积雪深度&#x27;</span>)) &#123;<br>        event.<span class="hljs-property">player</span>.<span class="hljs-title function_">tell</span>(<span class="hljs-string">&#x27;66.57cm&#x27;</span>)<br>        event.<span class="hljs-title function_">cancel</span>() <span class="hljs-comment">//隐藏指令</span><br>    &#125;<br>&#125;)<br><br></code></pre></td></tr></table></figure><p>查看游戏内的配方：</p><p>可以先在游戏内 <code>kubejs export ...</code> 然后去 <code>world/kubejs/exported</code> 查看导出文件</p>]]></content>
    
    
    
    <tags>
      
      <tag>game</tag>
      
      <tag>minecraft</tag>
      
      <tag>kubejs</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>hello</title>
    <link href="/2020/12/07/hello/"/>
    <url>/2020/12/07/hello/</url>
    
    <content type="html"><![CDATA[<h2 id="hello"><a href="#hello" class="headerlink" title="hello!"></a>hello!</h2><span id="more"></span><p>这个博客由 github + drone 完成<br>使用了以下仓库<br><code>github.com/shinobi9/hexo-blog</code></p><p><code>hexo-blog</code> 推送会用webhook trigger <code>cloud.drone.io</code> ,<br>执行 <code>hexo build</code>,然后部署到 <code>gh-pages</code> 分支, </p><p>因为配置了 CNAME, 故会跳转到 最终的配置的域名 <a href="https://blog.shinobi9.cyou/">https://blog.shinobi9.cyou</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>misc</tag>
      
      <tag>hello world</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
